// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/chaos-tech/training-note/api/model"
)

func newAtlasSchemaRevision(db *gorm.DB, opts ...gen.DOOption) atlasSchemaRevision {
	_atlasSchemaRevision := atlasSchemaRevision{}

	_atlasSchemaRevision.atlasSchemaRevisionDo.UseDB(db, opts...)
	_atlasSchemaRevision.atlasSchemaRevisionDo.UseModel(&model.AtlasSchemaRevision{})

	tableName := _atlasSchemaRevision.atlasSchemaRevisionDo.TableName()
	_atlasSchemaRevision.ALL = field.NewAsterisk(tableName)
	_atlasSchemaRevision.Version = field.NewString(tableName, "version")
	_atlasSchemaRevision.Description = field.NewString(tableName, "description")
	_atlasSchemaRevision.Type = field.NewInt64(tableName, "type")
	_atlasSchemaRevision.Applied = field.NewInt64(tableName, "applied")
	_atlasSchemaRevision.Total = field.NewInt64(tableName, "total")
	_atlasSchemaRevision.ExecutedAt = field.NewTime(tableName, "executed_at")
	_atlasSchemaRevision.ExecutionTime = field.NewInt64(tableName, "execution_time")
	_atlasSchemaRevision.Error = field.NewString(tableName, "error")
	_atlasSchemaRevision.ErrorStmt = field.NewString(tableName, "error_stmt")
	_atlasSchemaRevision.Hash = field.NewString(tableName, "hash")
	_atlasSchemaRevision.PartialHashes = field.NewString(tableName, "partial_hashes")
	_atlasSchemaRevision.OperatorVersion = field.NewString(tableName, "operator_version")

	_atlasSchemaRevision.fillFieldMap()

	return _atlasSchemaRevision
}

type atlasSchemaRevision struct {
	atlasSchemaRevisionDo

	ALL             field.Asterisk
	Version         field.String
	Description     field.String
	Type            field.Int64
	Applied         field.Int64
	Total           field.Int64
	ExecutedAt      field.Time
	ExecutionTime   field.Int64
	Error           field.String
	ErrorStmt       field.String
	Hash            field.String
	PartialHashes   field.String
	OperatorVersion field.String

	fieldMap map[string]field.Expr
}

func (a atlasSchemaRevision) Table(newTableName string) *atlasSchemaRevision {
	a.atlasSchemaRevisionDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a atlasSchemaRevision) As(alias string) *atlasSchemaRevision {
	a.atlasSchemaRevisionDo.DO = *(a.atlasSchemaRevisionDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *atlasSchemaRevision) updateTableName(table string) *atlasSchemaRevision {
	a.ALL = field.NewAsterisk(table)
	a.Version = field.NewString(table, "version")
	a.Description = field.NewString(table, "description")
	a.Type = field.NewInt64(table, "type")
	a.Applied = field.NewInt64(table, "applied")
	a.Total = field.NewInt64(table, "total")
	a.ExecutedAt = field.NewTime(table, "executed_at")
	a.ExecutionTime = field.NewInt64(table, "execution_time")
	a.Error = field.NewString(table, "error")
	a.ErrorStmt = field.NewString(table, "error_stmt")
	a.Hash = field.NewString(table, "hash")
	a.PartialHashes = field.NewString(table, "partial_hashes")
	a.OperatorVersion = field.NewString(table, "operator_version")

	a.fillFieldMap()

	return a
}

func (a *atlasSchemaRevision) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *atlasSchemaRevision) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 12)
	a.fieldMap["version"] = a.Version
	a.fieldMap["description"] = a.Description
	a.fieldMap["type"] = a.Type
	a.fieldMap["applied"] = a.Applied
	a.fieldMap["total"] = a.Total
	a.fieldMap["executed_at"] = a.ExecutedAt
	a.fieldMap["execution_time"] = a.ExecutionTime
	a.fieldMap["error"] = a.Error
	a.fieldMap["error_stmt"] = a.ErrorStmt
	a.fieldMap["hash"] = a.Hash
	a.fieldMap["partial_hashes"] = a.PartialHashes
	a.fieldMap["operator_version"] = a.OperatorVersion
}

func (a atlasSchemaRevision) clone(db *gorm.DB) atlasSchemaRevision {
	a.atlasSchemaRevisionDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a atlasSchemaRevision) replaceDB(db *gorm.DB) atlasSchemaRevision {
	a.atlasSchemaRevisionDo.ReplaceDB(db)
	return a
}

type atlasSchemaRevisionDo struct{ gen.DO }

type IAtlasSchemaRevisionDo interface {
	gen.SubQuery
	Debug() IAtlasSchemaRevisionDo
	WithContext(ctx context.Context) IAtlasSchemaRevisionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAtlasSchemaRevisionDo
	WriteDB() IAtlasSchemaRevisionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAtlasSchemaRevisionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAtlasSchemaRevisionDo
	Not(conds ...gen.Condition) IAtlasSchemaRevisionDo
	Or(conds ...gen.Condition) IAtlasSchemaRevisionDo
	Select(conds ...field.Expr) IAtlasSchemaRevisionDo
	Where(conds ...gen.Condition) IAtlasSchemaRevisionDo
	Order(conds ...field.Expr) IAtlasSchemaRevisionDo
	Distinct(cols ...field.Expr) IAtlasSchemaRevisionDo
	Omit(cols ...field.Expr) IAtlasSchemaRevisionDo
	Join(table schema.Tabler, on ...field.Expr) IAtlasSchemaRevisionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAtlasSchemaRevisionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAtlasSchemaRevisionDo
	Group(cols ...field.Expr) IAtlasSchemaRevisionDo
	Having(conds ...gen.Condition) IAtlasSchemaRevisionDo
	Limit(limit int) IAtlasSchemaRevisionDo
	Offset(offset int) IAtlasSchemaRevisionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAtlasSchemaRevisionDo
	Unscoped() IAtlasSchemaRevisionDo
	Create(values ...*model.AtlasSchemaRevision) error
	CreateInBatches(values []*model.AtlasSchemaRevision, batchSize int) error
	Save(values ...*model.AtlasSchemaRevision) error
	First() (*model.AtlasSchemaRevision, error)
	Take() (*model.AtlasSchemaRevision, error)
	Last() (*model.AtlasSchemaRevision, error)
	Find() ([]*model.AtlasSchemaRevision, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AtlasSchemaRevision, err error)
	FindInBatches(result *[]*model.AtlasSchemaRevision, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AtlasSchemaRevision) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAtlasSchemaRevisionDo
	Assign(attrs ...field.AssignExpr) IAtlasSchemaRevisionDo
	Joins(fields ...field.RelationField) IAtlasSchemaRevisionDo
	Preload(fields ...field.RelationField) IAtlasSchemaRevisionDo
	FirstOrInit() (*model.AtlasSchemaRevision, error)
	FirstOrCreate() (*model.AtlasSchemaRevision, error)
	FindByPage(offset int, limit int) (result []*model.AtlasSchemaRevision, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAtlasSchemaRevisionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a atlasSchemaRevisionDo) Debug() IAtlasSchemaRevisionDo {
	return a.withDO(a.DO.Debug())
}

func (a atlasSchemaRevisionDo) WithContext(ctx context.Context) IAtlasSchemaRevisionDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a atlasSchemaRevisionDo) ReadDB() IAtlasSchemaRevisionDo {
	return a.Clauses(dbresolver.Read)
}

func (a atlasSchemaRevisionDo) WriteDB() IAtlasSchemaRevisionDo {
	return a.Clauses(dbresolver.Write)
}

func (a atlasSchemaRevisionDo) Session(config *gorm.Session) IAtlasSchemaRevisionDo {
	return a.withDO(a.DO.Session(config))
}

func (a atlasSchemaRevisionDo) Clauses(conds ...clause.Expression) IAtlasSchemaRevisionDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a atlasSchemaRevisionDo) Returning(value interface{}, columns ...string) IAtlasSchemaRevisionDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a atlasSchemaRevisionDo) Not(conds ...gen.Condition) IAtlasSchemaRevisionDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a atlasSchemaRevisionDo) Or(conds ...gen.Condition) IAtlasSchemaRevisionDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a atlasSchemaRevisionDo) Select(conds ...field.Expr) IAtlasSchemaRevisionDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a atlasSchemaRevisionDo) Where(conds ...gen.Condition) IAtlasSchemaRevisionDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a atlasSchemaRevisionDo) Order(conds ...field.Expr) IAtlasSchemaRevisionDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a atlasSchemaRevisionDo) Distinct(cols ...field.Expr) IAtlasSchemaRevisionDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a atlasSchemaRevisionDo) Omit(cols ...field.Expr) IAtlasSchemaRevisionDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a atlasSchemaRevisionDo) Join(table schema.Tabler, on ...field.Expr) IAtlasSchemaRevisionDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a atlasSchemaRevisionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAtlasSchemaRevisionDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a atlasSchemaRevisionDo) RightJoin(table schema.Tabler, on ...field.Expr) IAtlasSchemaRevisionDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a atlasSchemaRevisionDo) Group(cols ...field.Expr) IAtlasSchemaRevisionDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a atlasSchemaRevisionDo) Having(conds ...gen.Condition) IAtlasSchemaRevisionDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a atlasSchemaRevisionDo) Limit(limit int) IAtlasSchemaRevisionDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a atlasSchemaRevisionDo) Offset(offset int) IAtlasSchemaRevisionDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a atlasSchemaRevisionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAtlasSchemaRevisionDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a atlasSchemaRevisionDo) Unscoped() IAtlasSchemaRevisionDo {
	return a.withDO(a.DO.Unscoped())
}

func (a atlasSchemaRevisionDo) Create(values ...*model.AtlasSchemaRevision) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a atlasSchemaRevisionDo) CreateInBatches(values []*model.AtlasSchemaRevision, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a atlasSchemaRevisionDo) Save(values ...*model.AtlasSchemaRevision) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a atlasSchemaRevisionDo) First() (*model.AtlasSchemaRevision, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AtlasSchemaRevision), nil
	}
}

func (a atlasSchemaRevisionDo) Take() (*model.AtlasSchemaRevision, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AtlasSchemaRevision), nil
	}
}

func (a atlasSchemaRevisionDo) Last() (*model.AtlasSchemaRevision, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AtlasSchemaRevision), nil
	}
}

func (a atlasSchemaRevisionDo) Find() ([]*model.AtlasSchemaRevision, error) {
	result, err := a.DO.Find()
	return result.([]*model.AtlasSchemaRevision), err
}

func (a atlasSchemaRevisionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AtlasSchemaRevision, err error) {
	buf := make([]*model.AtlasSchemaRevision, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a atlasSchemaRevisionDo) FindInBatches(result *[]*model.AtlasSchemaRevision, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a atlasSchemaRevisionDo) Attrs(attrs ...field.AssignExpr) IAtlasSchemaRevisionDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a atlasSchemaRevisionDo) Assign(attrs ...field.AssignExpr) IAtlasSchemaRevisionDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a atlasSchemaRevisionDo) Joins(fields ...field.RelationField) IAtlasSchemaRevisionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a atlasSchemaRevisionDo) Preload(fields ...field.RelationField) IAtlasSchemaRevisionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a atlasSchemaRevisionDo) FirstOrInit() (*model.AtlasSchemaRevision, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AtlasSchemaRevision), nil
	}
}

func (a atlasSchemaRevisionDo) FirstOrCreate() (*model.AtlasSchemaRevision, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AtlasSchemaRevision), nil
	}
}

func (a atlasSchemaRevisionDo) FindByPage(offset int, limit int) (result []*model.AtlasSchemaRevision, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a atlasSchemaRevisionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a atlasSchemaRevisionDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a atlasSchemaRevisionDo) Delete(models ...*model.AtlasSchemaRevision) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *atlasSchemaRevisionDo) withDO(do gen.Dao) *atlasSchemaRevisionDo {
	a.DO = *do.(*gen.DO)
	return a
}
